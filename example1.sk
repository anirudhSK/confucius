// sketch example1.sk  --bnd-inbits=4 --slv-seed=3
// gives us the synthesized program if(pkt_2 != 24) state_1 += pkt_1;
// while
// sketch example1.sk  --bnd-inbits=4 --slv-seed=1
// gives us the more reasonable program state_1 += pkt_1;
// My guess is that it's exploiting the fact that pkt_2 is zero by default.

bit rel_op(int pkt_1, int constant, int opcode) {
  assert((opcode == 1) || (opcode == 2) || (opcode == 3));
  if (opcode == 1) {
    return pkt_1 != constant;
  } else if (opcode == 2) {
    return pkt_1 < constant;
  } else if (opcode == 3) {
    return pkt_1 > constant;
  }
}

int atom_template(int state_1, int pkt_1, int pkt_2) {
  if (??) {
    state_1 += ??;
  } else if (??) {
    state_1 += pkt_1;
  } else if (??) {
    bit predicate = rel_op(pkt_2, ??, ??);
    if (predicate) state_1 += pkt_1;
  }
  return state_1;
}

int codelet(int state_1, int pkt_1, int pkt2){
  return state_1 + pkt_1;
}

harness void main(int state_1, int pkt_1, int pkt_2) {
  int spec_result = codelet(state_1, pkt_1, pkt_2);

  int impl_result = atom_template(state_1, pkt_1, pkt_2);

  // Assert values
  assert(spec_result == impl_result);
}
